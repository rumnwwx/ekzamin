ВАЖНО:
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shop'
]

AUTH_USER_MODEL = 'shop.User'


'''models.py'''
from django.contrib.auth.models import AbstractUser
from django.db import models


class User(AbstractUser):
    email = models.EmailField(max_length=100, verbose_name="Почта", unique=True)
    username = models.CharField(max_length=20, verbose_name="Имя пользователя", unique=True)
    name = models.CharField(max_length=20, verbose_name="Имя")
    surname = models.CharField(max_length=20, verbose_name="Фамилия")
    patronym = models.CharField(max_length=20, verbose_name="Отчество")
    avatar = models.ImageField(upload_to='avatars/', blank=True, null=True)

    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = ['email']

    def __str__(self):
        return f"{self.name} {self.surname}"

class Product(models.Model):
    name = models.CharField(max_length=200, unique=True)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    product_image = models.FileField(upload_to='product_photo/', blank=True, null=True)

    def __str__(self):
        return self.name


'''forms.py'''
from django import forms
from django.core.exceptions import ValidationError
from . import models


class RegisterForm(forms.ModelForm):
    username = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'Введите имя пользователя'}))
    email = forms.EmailField(widget=forms.EmailInput(attrs={'placeholder': 'Введите почту'}))
    name = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'Введите имя'}))
    surname = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'Введите фамилию'}))
    avatar = forms.ImageField()
    password = forms.CharField(widget=forms.PasswordInput(attrs={'placeholder': 'Введите пароль'}))
    password_confirmation = forms.CharField(widget=forms.PasswordInput(attrs={'placeholder': 'Повторите пароль'}))

    def clean_username(self):
        username = self.cleaned_data['username']
        if models.User.objects.filter(username=username).exists():
            raise ValidationError('Такое имя пользователя уже занято')
        return username

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if models.User.objects.filter(email=email).exists():
            raise ValidationError('Такой адрес электронной почты уже занят')
        return email

    def clean(self):
        cleaned_data = super().clean()
        password = cleaned_data.get('password')
        password_confirmation = cleaned_data.get('password_confirmation')
        if password and password_confirmation and password != password_confirmation:
            raise ValidationError('Пароли не совпадают')
        return cleaned_data

    def save(self, commit=True):
        user = super().save(commit=False)
        user.set_password(self.cleaned_data['password'])
        if commit:
            user.save()
        return user

    class Meta:
        model = models.User
        fields = ['username', 'email', 'name', 'surname', 'avatar']


class LoginForm(forms.ModelForm):
    username = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'Введите имя пользователя'}))
    password = forms.CharField(widget=forms.PasswordInput(attrs={'placeholder': 'Введите пароль'}))

    class Meta:
        model = models.User
        fields = ['password']


'''admin.py'''
from django.contrib import admin
from .models import Product


class ProductAdmin(admin.ModelAdmin):
    list_display = ('name', 'price', 'product_image')


admin.site.register(Product)


'''views.py'''
from django.shortcuts import render
from django.views.generic import CreateView
from .models import User, Product
from .forms import RegisterForm, LoginForm
from django.urls import reverse, reverse_lazy
from django.views.generic import FormView, UpdateView
from django.contrib.auth import authenticate, login, logout as auth_logout
from django.shortcuts import render, get_object_or_404, redirect
from django.views import generic


def index(request):
    return render(request, 'index.html')


class RegisterView(CreateView):
    model = User
    form_class = RegisterForm
    template_name = 'temps/register.html'
    success_url = reverse_lazy('shop:login')


class Login(FormView):
    template_name = 'temps/login.html'
    form_class = LoginForm
    success_url = reverse_lazy('shop:index')

    def form_valid(self, form):
        username = form.cleaned_data['username']
        password = form.cleaned_data['password']

        user = authenticate(self.request, username=username, password=password)

        if user is not None:
            login(self.request, user)
            return super().form_valid(form)
        else:
            form.add_error(None, 'Неправильное имя пользователя или пароль.')
            return self.form_invalid(form)


def logout(request):
    if request.user.is_authenticated:
        auth_logout(request)
        return redirect('shop:index')
    else:
        return redirect('shop:login')


class UserProfileListView(generic.ListView):
    model = User
    template_name = 'temps/profile.html'


def catalog(request):
    products = Product.objects.all()
    return render(request, "temps/catalog.html", {"products": products})


'''shop/urls.py'''
from django.urls import path, include
from . import views

app_name = 'shop'
urlpatterns = [
    path('', views.index, name='index'),
    path('register/', views.RegisterView.as_view(), name='register'),
    path('login/', views.Login.as_view(), name='login'),
    path('logout/', views.logout, name='logout'),
    path('profile/', views.UserProfileListView.as_view(), name='profile'),
    path('catalog/', views.catalog, name='catalog')
]


'''urls.py'''
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('shop.urls'), name='shop')
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


'''ТЕМПЛЕЙТЫ'''

'''index.html'''
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <h1>Добро пожаловать в магазин</h1>
    {% if user.is_authenticated %}
    <a href="{% url 'shop:logout' %}">Выход</a>
    <a href="{% url 'shop:profile' %}">Профиль</a>
    <a href="{% url 'shop:catalog' %}">Каталог</a>
    {% else %}
    <a href="{% url 'shop:register' %}">Регистрация</a>
    <a href="{% url 'shop:login' %}">Вход</a>
    {% endif %}
    {% block content %}
    {% endblock %}
</body>
</html>


'''register.html'''
{% extends 'index.html' %}

{% block title %} Вход {% endblock %}

{% block content %}
<form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Заргегестрироваться</button>
</form>
{% endblock %}


'''login.html'''
{% extends 'index.html' %}

{% block title %} Регистрация {% endblock %}

{% block content %}
<form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Войти</button>
</form>
{% endblock %}


''profile.html'''
{% extends 'index.html' %}

{% block title %}Профиль{% endblock %}


{% block content %}
<h1>Ваш профиль</h1>
<br>
{% if user.avatar %}
    <img src="{{ user.avatar.url }}" alt="Аватар пользователя" style="border-radius: 100%">
{% else %}
    <p>Аватар отсутствует</p>
{% endif %}
<p>Имя пользователя: {{ user.username }}</p>
<p>Ваше ФИО: {{ user.name }} {{ user.surname }}</p>
<p>Ваш email: {{ user.email }}</p>
{% endblock %}

'''catalog.html'''
{% extends 'index.html' %}

{% block title %} Каталог {% endblock %}

{% block content %}
<h2>Каталог</h2>
<div class="products d-flex gap-4 flex-wrap">
{% for product in products %}
<div class="card-product" style="max-width: 500px;">
    <img src="{{ product.product_image.url }}" alt="Аватар пользователя" style="width: 200px; height: 200px; object-fit: cover">
    <div class="d-flex justify-content-between">
        <p>{{ product.name }}</p>
        <p>{{ product.price }}р</p>
    </div>
</div>
{% empty %}
    <p>Товаров нет</p>
{% endfor %}
</div>
{% endblock %}